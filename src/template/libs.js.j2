const { spawn } = require('child_process')
const Chalk = require("chalk")

let printError = (msg) => console.error(Chalk.red(msg))

let printSuccess = (msg) => console.error(Chalk.green(msg))

let run = (command, cwd) => {
  return new Promise((resolve, reject) => {
    const process = spawn(command.split(" ").shift(), command.split(" ").splice(1), { stdio: "inherit", cwd, shell: true })
    process.on('close', code => code !== 0 ? reject(code) : resolve(0))
  })
}

let runWithStd = (command, cwd=process.cwd()) => {
  return new Promise((resolve, reject) => {
    const process = spawn(command.split(" ").shift(), command.split(" ").splice(1), { cwd, shell: true })
    let res = {}
    process.stdout.on('data', data => res["out"] = data.toString().replace(/\r?\n|\r/g, ""))
    process.stderr.on('data', data =>  res["err"] = data )
    process.on('close', (code) => {
      res["exit"] = code
      resolve(res)
    })
  })
}

let register = (command, pwd=process.cwd()) => {
  return new Promise(async (resolve, reject) => {
    let result = await runWithStd(command, pwd)
    if (result.err) return reject(result.err)
    resolve(result.out)
  })
}

module.exports = {
  run,
  printError,
  printSuccess,
  register
}
